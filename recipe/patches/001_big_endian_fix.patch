diff --git a/src/normalizer.cc b/src/normalizer.cc
index 2ab8084..da9288f 100644
--- a/src/normalizer.cc
+++ b/src/normalizer.cc
@@ -260,14 +260,15 @@ std::string Normalizer::EncodePrecompiledCharsMap(
   std::string blob;
   blob.append(string_util::EncodePOD<uint32>(trie_blob.size()));
   blob.append(trie_blob.data(), trie_blob.size());
-  blob.append(normalized.data(), normalized.size());
+  
 
 #ifdef IS_BIG_ENDIAN
   uint32 *data = reinterpret_cast<uint32 *>(const_cast<char *>(blob.data()));
-  for (int i = 0; i <= trie_blob.size() / 4; ++i)
-    data[i] = util::Swap32(data[i]);
+  for (int i = 0; i < blob.size() / 4; ++i) data[i] = Swap32(data[i]);
 #endif
 
+  blob.append(normalized.data(), normalized.size());
+
   return blob;
 }
 
@@ -285,7 +286,7 @@ util::Status Normalizer::DecodePrecompiledCharsMap(
   }
 
 #ifdef IS_BIG_ENDIAN
-  trie_blob_size = util::Swap32(trie_blob_size);
+  trie_blob_size = Swap32(trie_blob_size);
 #endif
 
   if (trie_blob_size >= blob.size())
@@ -296,7 +297,7 @@ util::Status Normalizer::DecodePrecompiledCharsMap(
 #ifdef IS_BIG_ENDIAN
   buffer->assign(blob.data(), trie_blob_size);
   uint32 *data = reinterpret_cast<uint32 *>(const_cast<char *>(buffer->data()));
-  for (int i = 0; i < trie_blob_size / 4; ++i) data[i] = util::Swap32(data[i]);
+  for (int i = 0; i < trie_blob_size / 4; ++i) data[i] = Swap32(data[i]);
   *trie_blob = absl::string_view(buffer->data(), trie_blob_size);
 #else
   *trie_blob = absl::string_view(blob.data(), trie_blob_size);